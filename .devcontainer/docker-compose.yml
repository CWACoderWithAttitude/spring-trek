version: "3.7"

services:
   dc-sb-prom:
      #container_name: dc-sb-prom
      hostname: dc-sb-prom.local
      #ports:
      #   - 8823:8080
      build:
         context: .
      working_dir: /src
      volumes:
         - ..:/src:cached
      command: >
         bash -c "sleep infinity"
      #networks:
      #   coderwithattitude:

   db:
      image: postgres:14.1-alpine
      restart: always
      environment:
         - POSTGRES_USER=${db_user}
         - POSTGRES_PASSWORD=${db_password}
         - POSTGRES_DB=${db_name}
      #ports:
      #   - "${db_port}:5432"
      volumes:
         - db_data:/var/lib/postgresql/data

   # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
   pgadmin:
      image: dpage/pgadmin4:latest
      environment:
         - PGADMIN_DEFAULT_EMAIL=cwa@dogger.com
         - PGADMIN_DEFAULT_PASSWORD=cwa@dogger.com
         - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
         - PGADMIN_CONFIG_LOGIN_BANNER="Authorised users only!"
         - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10
      ports:
         - ${pgadmin_port}:80

   # https://github.com/prometheus-community/postgres_exporter
   postgres_metrics:
      image: quay.io/prometheuscommunity/postgres-exporter
      environment:
         - DATA_SOURCE_NAME="postgresql://${db_user}:${db_password}@db:5432/${db_name}?sslmode=disable"

   prometheus:
      image: prom/prometheus
      #container_name: prometheus
      ports:
         - ${prometheus_port}:9090
      #volumes:
      #  - ./prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml
      command:
         - "--config.file=/etc/prometheus/prometheus.yml"
      volumes:
         - ./prometheus_config/prometheus.yml:/etc/prometheus/prometheus.yml
      depends_on:
         - dc-sb-prom

   adminer:
      image: adminer:4.8.1
      hostname: adminer.local
      #container_name: adminer
      restart: always
      environment:
         - adminer_default_db_driver:pgsql
      ports:
         - ${adminer_http_extern}:8080
      depends_on:
         - db

   # https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/#increase-log-level-using-the-docker-compose
   grafana:
      image: grafana/grafana-oss
      restart: unless-stopped
      ports:
         - ${grafana_port}:3000
      volumes:
      - grafana_storage:/var/lib/grafana

#networks:
#  dc-generic-nodejs-net:
# https://docs.docker.com/storage/volumes/

volumes:
   cache:
   #  cache:
   db_data:
      driver: local
   grafana_storage: {}

networks:
   coderwithattitude:
